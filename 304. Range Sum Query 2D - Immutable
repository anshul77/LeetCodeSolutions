class NumMatrix {
public:
    vector<vector<int>> dp;
    NumMatrix(vector<vector<int>> mat){
        int n=mat.size();
        if(n==0) return;
        int m=mat[0].size();
        for (int i=0;i<n;i++){
            vector<int> tmp,tmp2;
            for (int j = 0; j < m; j++) {
                if( i==0 ){
                    if(j==0) tmp.push_back(mat[i][j]);
                    else tmp.push_back(tmp[j-1]+mat[i][j]);
                }else{ 
                    if(j==0){ 
                        tmp.push_back(dp[i-1][j] + mat[i][j]);
                        tmp2.push_back( mat[i][j]);
                    }
                    else {
                        tmp.push_back(dp[i-1][j] + mat[i][j] + tmp2[j-1]);
                        tmp2.push_back(tmp2[j-1] + mat[i][j]);
                    }
                }
            }
            dp.push_back(tmp);
        } 
        // for(int i=0;i<n;i++){    //testing output
        //     for(int j=0;j<m;j++){
        //         cout<<dp[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        if(dp.size()==0) return 0;  //for null matrixes 
        return dp[row2][col2] - (col1>0?dp[row2][col1-1]:0) - (row1>0?dp[row1-1][col2]:0) + ((row1>0&&col1>0)?dp[row1-1][col1-1]:0);    
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
