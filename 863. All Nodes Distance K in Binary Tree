/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> path, temp_path;
    void getpath(TreeNode* root, TreeNode* target){
        if(root == NULL) return;
        else{
            if(root == target){
                path = temp_path;
            }
            temp_path.push_back(root->left);
            getpath(root->left, target);
            temp_path.pop_back();
            temp_path.push_back(root->right);
            getpath(root->right, target);
            temp_path.pop_back();
        }
    }
    
    vector<int> findNodeKdistance(TreeNode * root, int k){
        if(root == NULL || k<0) return vector<int>{};
        if(k==0) return vector<int> {root->val};
        vector<int> l = findNodeKdistance(root->left, k-1);
        vector<int> r = findNodeKdistance(root->right, k-1);
        vector<int> rtrn;
        for(int i=0;i<l.size();i++) rtrn.push_back(l[i]);
        for(int i=0;i<r.size();i++) rtrn.push_back(r[i]);
        return rtrn;
    }
    
    vector<int> merge(vector<int> ans, vector<int> temp){
        for(int i=0;i<temp.size();i++){
            ans.push_back(temp[i]);
        }
        return ans;
    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        path.clear();
        vector<int> ans;
        temp_path.clear();
        temp_path.push_back(root);
        getpath(root, target); 
        // for(int i=0;i<path.size();i++) cout<<path[i]->val<<" ";
        
        // after getting path again start from the top 
        TreeNode* cur = root;
        int len = path.size()-1;
        for(int i=0;i<path.size()-1;i++){
            vector<int> temp;
            if(len == K) ans.push_back(path[i]->val);
            if(path[i]->left == path[i+1]){ // path is in left
                temp = findNodeKdistance(path[i]->right, K-len-1); 
            }else{
                temp = findNodeKdistance(path[i]->left, K-len-1); 
            }
            len--;
            ans = merge(ans, temp);
        }
        // for the subtree of the target itself
        ans = merge(ans, findNodeKdistance(path[path.size()-1], K));
        return ans;
    }
};
